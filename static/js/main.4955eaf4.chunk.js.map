{"version":3,"sources":["components/SearchResult.js","components/TrailSearch.js","App.js","serviceWorker.js","index.js"],"names":["SearchResult","trail","className","href","id","name","summary","location","length","USA","TrailSearch","props","useState","value","stateSelected","setStateSelected","searchBar","setSearchBar","searchResults","setSearchResults","keywordResults","setKeywordResults","onSearchSubmit","event","preventDefault","newKeywordResults","filter","toLowerCase","includes","allKeywordResults","map","key","stateOptions","single_state","onChange","target","console","log","axios","get","then","response","data","trails","newSearchResults","catch","error","message","defaultValue","onSubmit","type","newSearch","onClick","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","lat","lng","App","basename","process","path","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4955eaf4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './SearchResult.css';\n\n\nconst SearchResult = ({ trail }) => {\n\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h4 className=\"card-title\"> <a href={`/trail/${trail.id}`}> {trail.name} </a> </h4>\n        \n        \n        <p className=\"card-text mb-2 text-muted\"> {trail.summary} </p>\n        <a className=\"card-link\"> {trail.location} </a>\n        <a className=\"card-link\"> {trail.length} mi</a>\n      </div>\n    </div>\n  );\n}\n\n\nexport default SearchResult;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './TrailSearch.css';\nimport axios from 'axios';\nimport SearchResult from './SearchResult';\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker } from \"react-google-maps\";\n\n\nconst TrailSearch = (props) => {\n\n  const [ stateSelected, setStateSelected ] = useState({value: ''});\n  const [ searchBar, setSearchBar ] = useState('');\n  const [ searchResults, setSearchResults ] = useState([]);\n  const [ keywordResults, setKeywordResults ] = useState([]);\n  // const BASE_URL = 'http://127.0.0.1:8000/diamondtrails'\n  const BASE_URL = 'https://trailmix-base.wm.r.appspot.com/diamondtrails'\n\n  const onInputChange = (event) => {\n\t\tlet newSearch = { ...searchBar };\n\t\tnewSearch = event.target.value;\n    setSearchBar(newSearch);\n  };\n\n  const onSelectState = (event) => {\n    setStateSelected({value: event.target.value});\n    setKeywordResults([]);\n    console.log(stateSelected);\n\n    axios\n    .get(`${BASE_URL}/all-trails/${event.target.value}`)\n    .then((response) => {\n      console.log(response.data.trails);\n      const newSearchResults = response.data.trails;\n      setSearchResults(newSearchResults);\n    })\n    .catch((error) => {\n      console.log(error.message);\n    })\n  };\n\n  // const onSearchSubmit = (event) => {\n  //   event.preventDefault();\n\n  //   axios\n  //   .get(`${BASE_URL}/all-trails/`)\n  //   .then((response) => {\n  //     console.log(response.data.trails);\n  //     const newSearchResults = response.data.trails;\n  //     setSearchResults(newSearchResults);\n  //   })\n  //   .catch((error) => {\n  //     console.log(error.message);\n  //   })\n  // }\n\n  const onSearchSubmit = (event) => {\n    event.preventDefault();\n\n    const newKeywordResults = searchResults.filter(trail => trail.name.toLowerCase().includes(searchBar.toLowerCase()));\n    setKeywordResults(newKeywordResults);\n    setSearchBar('');\n  }\n\n  // const onSelectSubmit = (event) => {\n  //   event.preventDefault();\n\n  //   axios\n  //   .get(`${BASE_URL}/all-trails/${stateSelected.value}`)\n  //   .then((response) => {\n  //     console.log(response.data.trails);\n  //     const newSearchResults = response.data.trails;\n  //     setSearchResults(newSearchResults);\n  //   })\n  //   .catch((error) => {\n  //     console.log(error.message);\n  //   })\n  // }\n\n  // const allSearchResults = searchResults.map((trail) => {\n  //   return (\n  //     <div key={trail.id}>\n  //       {trail.name}\n  //     </div>\n  //   );\n  // })\n\n  const allKeywordResults = keywordResults.map((trail) => {\n    return (\n      <SearchResult key={trail.id} trail={trail} />\n    );\n  })\n\n  const stateOptions = USA.map((single_state) => {\n    return (\n    <option value={single_state}> {single_state} </option>\n    );\n  })\n\n\n  return (\n    <div className=\"d-flex flex-column trailsearch-main-container\" >\n\n      {/* <form onSubmit={onSelectSubmit}> */}\n        <select value={stateSelected.value} onChange={onSelectState} className=\"custom-select\">\n          <option defaultValue>Select State</option>\n\n          <option value=\"WA\">WA</option>\n\n          {stateOptions}\n        </select>\n      {/* </form> */}\n\n\n      <form onSubmit={ onSearchSubmit } className=\"align-self-center\" >\n        <div className=\"input-group\">\n          <input\n            type='type'\n            name='query'\n            className='searchbox'\n            onChange={onInputChange}\n            value={searchBar}\n          />\n          <div className=\"input-group-append\">\n            <input\n              className=\"btn btn-secondary btn-style bg-dark\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Search\"\n              onClick={ onSearchSubmit }\n            />\n          </div>\n        </div>\n      </form>\n\n      {/* <h3>Keyword Results</h3> */}\n      {allKeywordResults}\n\n      {/* <h3>Explore Trails in {stateSelected.value} </h3>\n      {allSearchResults} */}\n\n    </div>\n\n  )\n}\n\n\nconst USA = [\n  'AK','AL','AR','AZ','CA','CO','CT','DE','FL','GA','HI',\n  'IA','ID','IL','IN','KS','KY','LA','MA','MD','ME','MI','MN','MO','MS','MT',\n  'NC','ND','NE','NH','NJ','NM','NV','NY','OH','OK','OR','PA','RI','SC','SD',\n  'TN','TX','UT','VA','VT','WA','WI','WV','WY']\n\nexport default TrailSearch;\n","import React from 'react';\nimport Trail from './components/Trail';\nimport './App.css';\nimport { GoogleMap, withScriptjs, withGoogleMap } from \"react-google-maps\";\nimport { BrowserRouter as Router, Switch, Route, Link, useRouteMatch, useParams } from \"react-router-dom\";\nimport TrailSearch from './components/TrailSearch';\n\nfunction Map() {\n  return (\n    <GoogleMap\n      defaultZoom={10}\n      defaultCenter={{ lat: 47.62, lng: -122.19 }}\n    />\n  );\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map))\n\n// function App() {\n//   return (\n//     <div style={{ width: '100vw', height: '100vh'}} >\n//     <WrappedMap \n//       googleMapURL= {`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n//       loadingElement={<div style={{ height: \"100%\" }} />}\n//       containerElement={<div style={{ height: \"100%\" }} />}\n//       mapElement={<div style={{ height: \"100%\" }} />}\n//     />\n//     </div>\n//   );\n// }\n\nfunction App() {\n  return (\n\n    <Router basename={`${process.env.PUBLIC_URL}/`} >\n      <div>\n        <nav>\n        </nav>\n\n\n        <Switch>\n          <Route path=\"/trails-search\">\n            <TrailSearch />\n          </Route>\n          <Route path=\"/trail\">\n            <TrailSearch />\n          </Route>\n          <Route exact path=\"/\">\n            <TrailSearch />\n          </Route>\n\n        </Switch>\n      </div>\n    </Router>\n\n    // <div className=\"App container\">\n    //   <h1> Trails LIVE </h1>\n\n    //   <TrailSearch />\n    // </div>\n  );\n}\n\nconst Trails = () => {\n  let match = useRouteMatch();\n\n  return (\n    <div>\n      <Switch>\n        <Route path={`${match.path}/:externalID`}>\n          <ATrail />\n        </Route>\n        {/* <Route path={match.path}>\n          <h3>Please select a topic. </h3>\n        </Route> */}\n      </Switch>\n    </div>\n  );\n}\n\nconst ATrail = () => {\n  let { externalID } = useParams();\n  return (\n    <Trail externalID={externalID} />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}